import { useState, useEffect } from 'react'
import { useNavigate, useSearchParams } from 'react-router-dom'
import { useAuth } from '../hooks/useAuth'
import api from '../services/api'
import AddressAutocomplete from '../components/AddressAutocomplete'

const CreateTaskPage = () => {
  const navigate = useNavigate()
  const { user } = useAuth()
  const [searchParams] = useSearchParams()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    fromAddress: '',
    toAddress: '',
    date: '',
    category: 'flat'
  })

  const [errors, setErrors] = useState({})

  const categories = [
    { value: 'flat', label: '–ö–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥' },
    { value: 'office', label: '–û—Ñ–∏—Å–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥' },
    { value: 'intercity', label: '–ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–π –ø–µ—Ä–µ–µ–∑–¥' },
    { value: 'garbage', label: '–í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞' }
  ]

  // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL
  useEffect(() => {
    const categoryFromUrl = searchParams.get('category')
    if (categoryFromUrl && categories.some(cat => cat.value === categoryFromUrl)) {
      setFormData(prev => ({
        ...prev,
        category: categoryFromUrl
      }))
    }
  }, [searchParams])

  const validateForm = () => {
    const newErrors = {}
    
    if (!formData.title.trim()) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    } else if (formData.title.length < 10) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤'
    }
    
    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    } else if (formData.description.length < 20) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤'
    }
    
    if (!formData.fromAddress.trim()) {
      newErrors.fromAddress = '–ê–¥—Ä–µ—Å –æ—Ç–∫—É–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    }
    
    if (!formData.toAddress.trim()) {
      newErrors.toAddress = '–ê–¥—Ä–µ—Å –∫—É–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    }
    
    if (!formData.date) {
      newErrors.date = '–î–∞—Ç–∞ –ø–µ—Ä–µ–µ–∑–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
    } else {
      const selectedDate = new Date(formData.date)
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      
      if (selectedDate < today) {
        newErrors.date = '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º'
      }
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏...')
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData)
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user)
    
    if (!validateForm()) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞')
      return
    }
    
    setIsLoading(true)
    setError('')
    
    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:', '/api/tasks')
      const response = await api.post('/tasks', formData)
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data)
      
      if (response.data.success) {
        console.log('üéâ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...')
        navigate(`/tasks/${response.data.task.id}`)
      } else {
        console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª success: false')
        setError(response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }
    } catch (err) {
      console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', err)
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        status: err.response?.status,
        statusText: err.response?.statusText,
        data: err.response?.data,
        message: err.message
      })
      
      setError(
        err.response?.data?.message || 
        `–û—à–∏–±–∫–∞ ${err.response?.status || '—Å–µ—Ç–∏'}: ${err.message}`
      )
    } finally {
      setIsLoading(false)
    }
  }

  // –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞–º–∏
  const fillExample = (category) => {
    const examples = {
      flat: {
        title: '–ü–µ—Ä–µ–µ–∑–¥ 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ü–µ—Ä–º–∏',
        description: '–ü–µ—Ä–µ–µ–∑–¥ –∏–∑ 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ 5 —ç—Ç–∞–∂–µ (–ª–∏—Ñ—Ç –µ—Å—Ç—å) –≤ –Ω–æ–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ 3 —ç—Ç–∞–∂–µ. –ü—Ä–∏–º–µ—Ä–Ω–æ 15-20 –∫–æ—Ä–æ–±–æ–∫, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, —Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞, –¥–∏–≤–∞–Ω, –∫—Ä–æ–≤–∞—Ç—å, —à–∫–∞—Ñ. –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ø–∞–∫–æ–≤–∫–∞ —Ö—Ä—É–ø–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.',
        fromAddress: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 10, –ü–µ—Ä–º—å',
        toAddress: '—É–ª. –ü—É—à–∫–∏–Ω–∞, 25, –ü–µ—Ä–º—å'
      },
      office: {
        title: '–ü–µ—Ä–µ–µ–∑–¥ –æ—Ñ–∏—Å–∞ –Ω–∞ 20 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –ü–µ—Ä–º–∏',  
        description: '–ü–µ—Ä–µ–µ–∑–¥ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ—Ñ–∏—Å–∞: 20 —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç, –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –ø—Ä–∏–Ω—Ç–µ—Ä—ã, –æ—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å, –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–µ—Ä–µ–µ–∑–¥ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏.',
        fromAddress: '—É–ª. –ú–æ–Ω–∞—Å—Ç—ã—Ä—Å–∫–∞—è, 5, –æ—Ñ–∏—Å 210, –ü–µ—Ä–º—å',
        toAddress: '—É–ª. –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 15, –æ—Ñ–∏—Å 305, –ü–µ—Ä–º—å'
      },
      intercity: {
        title: '–ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–π –ø–µ—Ä–µ–µ–∑–¥ –ü–µ—Ä–º—å-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        description: '–ü–µ—Ä–µ–µ–∑–¥ —Å–µ–º—å–∏ –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫ –∏–∑ –ü–µ—Ä–º–∏ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥. 1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, –æ—Å–Ω–æ–≤–Ω–∞—è –º–µ–±–µ–ª—å, –ª–∏—á–Ω—ã–µ –≤–µ—â–∏. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —É–ø–∞–∫–æ–≤–∫–æ–π –∏ –ø–æ–≥—Ä—É–∑–∫–æ–π/—Ä–∞–∑–≥—Ä—É–∑–∫–æ–π. –ü–µ—Ä–µ–µ–∑–¥ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞.',
        fromAddress: '—É–ª. –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è, 13, –ü–µ—Ä–º—å',
        toAddress: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 85, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
      },
      garbage: {
        title: '–í—ã–≤–æ–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ –≤ –ü–µ—Ä–º–∏',
        description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ–∑—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: –∫—É—Å–∫–∏ –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–∞, —Å—Ç–∞—Ä–∞—è –ø–ª–∏—Ç–∫–∞, –æ–±—Ä–µ–∑–∫–∏ –ª–∞–º–∏–Ω–∞—Ç–∞, —É–ø–∞–∫–æ–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ–±—ä–µ–º 3-4 –∫—É–±–∞. –ú—É—Å–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 2 —ç—Ç–∞–∂–µ, –ª–∏—Ñ—Ç–∞ –Ω–µ—Ç.',
        fromAddress: '—É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, 15, –∫–≤. 45, –ü–µ—Ä–º—å',
        toAddress: '–ü–æ–ª–∏–≥–æ–Ω –∏–ª–∏ —Å–≤–∞–ª–∫–∞ (–ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é)'
      }
    }
    
    const example = examples[category]
    if (example) {
      setFormData(prev => ({
        ...prev,
        ...example
      }))
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (!user) {
    return (
      <div className="text-center py-8">
        <h2 className="text-2xl font-bold mb-4">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
        <p className="text-gray-600 mb-4">–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        <button 
          onClick={() => navigate('/login')}
          className="btn btn-primary"
        >
          –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
        </button>
      </div>
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (user.role === 'executor') {
    return (
      <div className="text-center py-8">
        <div className="text-4xl mb-4">‚ö†Ô∏è</div>
        <h2 className="text-2xl font-bold mb-4">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
        <p className="text-gray-600 mb-4">
          –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏. 
          <br />
          –í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏.
        </p>
        <div className="flex gap-3 justify-center">
          <button 
            onClick={() => navigate('/tasks')}
            className="btn btn-primary"
          >
            –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏
          </button>
          <button 
            onClick={() => navigate('/my-jobs')}
            className="btn btn-secondary"
          >
            –ú–æ–∏ —Ä–∞–±–æ—Ç—ã
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold mb-8">–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É</h1>
      
      {/* –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã */}
      <div className="bg-blue-50 rounded-lg p-4 mb-6">
        <h3 className="font-semibold mb-3">üí° –•–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±—ã—Å—Ç—Ä–æ?</h3>
        <div className="flex flex-wrap gap-2">
          {categories.map(cat => (
            <button
              key={cat.value}
              type="button"
              onClick={() => fillExample(cat.value)}
              className="text-sm bg-white border border-blue-200 px-3 py-1 rounded hover:bg-blue-100 transition-colors"
            >
              –ü—Ä–∏–º–µ—Ä: {cat.label}
            </button>
          ))}
        </div>
        <p className="text-xs text-blue-600 mt-2">
          –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–∏–º–µ—Ä–æ–º, –∑–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã
        </p>
      </div>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="card">
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6">
              {error}
            </div>
          )}

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-6">
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
              –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏ *
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.title ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–µ–∑–¥ 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã"
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{errors.title}</p>
            )}
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div className="mb-6">
            <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-2">
              –¢–∏–ø –ø–µ—Ä–µ–µ–∑–¥–∞ *
            </label>
            <select
              id="category"
              name="category"
              value={formData.category}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {categories.map(cat => (
                <option key={cat.value} value={cat.value}>
                  {cat.label}
                </option>
              ))}
            </select>
          </div>

          {/* –ê–¥—Ä–µ—Å–∞ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <AddressAutocomplete
              label="–û—Ç–∫—É–¥–∞"
              value={formData.fromAddress}
              onChange={(e) => handleChange({ target: { name: 'fromAddress', value: e.target.value } })}
              placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –ü–µ—Ä–º–∏..."
              required={true}
              error={errors.fromAddress}
            />

            <AddressAutocomplete
              label="–ö—É–¥–∞"
              value={formData.toAddress}
              onChange={(e) => handleChange({ target: { name: 'toAddress', value: e.target.value } })}
              placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –ü–µ—Ä–º–∏..."
              required={true}
              error={errors.toAddress}
            />
          </div>

          {/* –î–∞—Ç–∞ */}
          <div className="mb-6">
            <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-2">
              –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–µ–∑–¥–∞ *
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={formData.date}
              onChange={handleChange}
              min={new Date().toISOString().split('T')[0]}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.date ? 'border-red-500' : 'border-gray-300'
              }`}
            />
            {errors.date && (
              <p className="mt-1 text-sm text-red-600">{errors.date}</p>
            )}
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="mb-6">
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
              –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              rows={4}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.description ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–µ–∑–¥–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, —ç—Ç–∞–∂, –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ñ—Ç–∞, –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è..."
            />
            {errors.description && (
              <p className="mt-1 text-sm text-red-600">{errors.description}</p>
            )}
            <p className="mt-1 text-xs text-gray-500">
              –ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥—É—Ç –æ—Ç–∫–ª–∏–∫–∏.
            </p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-4 pt-6">
            <button
              type="submit"
              disabled={isLoading}
              className="btn btn-primary flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'}
            </button>
            
            <button
              type="button"
              onClick={() => navigate('/tasks')}
              className="btn btn-secondary px-6"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      </form>
    </div>
  )
}

export default CreateTaskPage 