const SubscriptionService = require('./subscriptionService');

class PaymentService {
  constructor() {
    this.yooCheckout = null;
    this.initialized = false;
  }

  // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
  _initializeYooKassa() {
    if (this.initialized) return;

    const { YooCheckout } = require('@a2seven/yoo-checkout');
    const shopId = process.env.YOOKASSA_SHOP_ID;
    const secretKey = process.env.YOOKASSA_SECRET_KEY;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
    if (!shopId || !secretKey) {
      throw new Error('‚ùå YooKassa credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! –î–æ–±–∞–≤—å—Ç–µ YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY –≤ .env —Ñ–∞–π–ª');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ placeholder –∑–Ω–∞—á–µ–Ω–∏—è
    if (shopId === 'your_shop_id' || secretKey === 'your_secret_key') {
      throw new Error(`
‚ùå YooKassa –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!

–î–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π –Ω—É–∂–Ω–æ:
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ YooKassa (yookassa.ru)
2. –ü–æ–ª—É—á–∏—Ç—å SHOP_ID –∏ SECRET_KEY
3. –î–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ .env —Ñ–∞–π–ª:
   YOOKASSA_SHOP_ID=–≤–∞—à_shop_id
   YOOKASSA_SECRET_KEY=–≤–∞—à_secret_key

–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: SHOP_ID="${shopId}", SECRET_KEY="${secretKey}"
      `);
    }

    this.yooCheckout = new YooCheckout({
      shopId: shopId,
      secretKey: secretKey,
    });
    
    this.initialized = true;
    console.log('‚úÖ YooKassa –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏');
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ü–†–û –ø–æ–¥–ø–∏—Å–∫–∏
  async createSubscriptionPayment(userId, subscriptionType = 'pro') {
    this._initializeYooKassa(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionPrices = {
        'pro': 499.00,
        'pro_plus': 999.00
      };

      const amount = subscriptionPrices[subscriptionType];
      if (!amount) {
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
      const subscription = await SubscriptionService.createSubscription(
        userId, 
        subscriptionType, 
        amount
      );

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
      const payment = await this.yooCheckout.createPayment({
        amount: {
          value: amount.toFixed(2),
          currency: 'RUB'
        },
        description: `–ü–†–û –ø–æ–¥–ø–∏—Å–∫–∞ Luggo (${subscriptionType === 'pro' ? '–ü–†–û' : '–ü–†–û –ü–ª—é—Å'})`,
        metadata: {
          subscriptionId: subscription.id,
          userId: userId,
          subscriptionType: subscriptionType
        },
        confirmation: {
          type: 'redirect',
          return_url: `${process.env.FRONTEND_URL || 'http://localhost:5173'}/subscription/success`
        },
        capture: true
      });

      console.log(`üí≥ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ YooKassa: ${payment.id} –Ω–∞ —Å—É–º–º—É ${amount}‚ÇΩ`);

      return {
        subscription,
        payment,
        paymentUrl: payment.confirmation.confirmation_url
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç YooKassa
  async handlePaymentWebhook(paymentData) {
    try {
      const { object: payment } = paymentData;
      
      console.log(`üîî Webhook –æ—Ç YooKassa: ${payment.id}, —Å—Ç–∞—Ç—É—Å: ${payment.status}`);

      if (payment.status === 'succeeded') {
        const metadata = payment.metadata;
        const subscriptionId = metadata.subscriptionId;

        if (!subscriptionId) {
          console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç subscriptionId –≤ metadata');
          return false;
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await SubscriptionService.activateSubscription(subscriptionId, {
          paymentId: payment.id,
          paymentSystem: 'yookassa',
          amount: parseFloat(payment.amount.value),
          paymentMethod: payment.payment_method?.type || 'unknown'
        });

        console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionId} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`);
        return true;

      } else if (payment.status === 'canceled') {
        console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ ${payment.id} –æ—Ç–º–µ–Ω–µ–Ω`);
        return false;
      }

      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
  async getPaymentInfo(paymentId) {
    this._initializeYooKassa();
    
    try {
      const payment = await this.yooCheckout.getPayment(paymentId);
      return payment;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
  async createRefund(paymentId, amount, reason = '–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç–∞') {
    this._initializeYooKassa();
    
    try {
      const refund = await this.yooCheckout.createRefund({
        payment_id: paymentId,
        amount: {
          value: amount.toFixed(2),
          currency: 'RUB'
        },
        description: reason
      });

      console.log(`üí∏ –°–æ–∑–¥–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç: ${refund.id} –Ω–∞ —Å—É–º–º—É ${amount}‚ÇΩ`);
      return refund;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  async checkPaymentStatus(paymentId) {
    this._initializeYooKassa();
    
    try {
      const payment = await this.getPaymentInfo(paymentId);
      return {
        status: payment.status,
        paid: payment.status === 'succeeded',
        amount: parseFloat(payment.amount.value),
        currency: payment.amount.currency,
        createdAt: payment.created_at
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
      return { status: 'error', paid: false };
    }
  }
}

module.exports = new PaymentService(); 