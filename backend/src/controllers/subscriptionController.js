const SubscriptionService = require('../services/subscriptionService');
const PaymentService = require('../services/paymentService');
const { User } = require('../models');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserSubscription = async (req, res) => {
  try {
    const userId = req.user.id;
    
    const subscriptionInfo = await SubscriptionService.getUserSubscriptionInfo(userId);
    
    if (!subscriptionInfo) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      data: subscriptionInfo
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ü–†–û –ø–æ–¥–ø–∏—Å–∫–∏
const createSubscriptionPayment = async (req, res) => {
  try {
    const userId = req.user.id;
    const { type = 'pro' } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (req.user.role !== 'executor') {
      return res.status(403).json({
        success: false,
        message: '–ü–†–û –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    const hasActivePro = await SubscriptionService.checkProStatus(userId);
    if (hasActivePro) {
      return res.status(400).json({
        success: false,
        message: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ü–†–û –ø–æ–¥–ø–∏—Å–∫–∞'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const paymentResult = await PaymentService.createSubscriptionPayment(userId, type);

    res.json({
      success: true,
      data: {
        subscriptionId: paymentResult.subscription.id,
        paymentUrl: paymentResult.paymentUrl,
        amount: paymentResult.subscription.amount,
        type: paymentResult.subscription.type
      },
      message: '–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É...'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
};

// Webhook –æ—Ç YooKassa
const handlePaymentWebhook = async (req, res) => {
  try {
    console.log('üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç YooKassa');
    
    const success = await PaymentService.handlePaymentWebhook(req.body);
    
    if (success) {
      res.status(200).json({ status: 'ok' });
    } else {
      res.status(400).json({ status: 'error' });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).json({ status: 'error' });
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
const checkPaymentStatus = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const userId = req.user.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    const paymentStatus = await PaymentService.checkPaymentStatus(paymentId);

    res.json({
      success: true,
      data: paymentStatus
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
};

// –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
const cancelSubscription = async (req, res) => {
  try {
    const userId = req.user.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    const hasActivePro = await SubscriptionService.checkProStatus(userId);
    if (!hasActivePro) {
      return res.status(400).json({
        success: false,
        message: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ü–†–û –ø–æ–¥–ø–∏—Å–∫–∏'
      });
    }

    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await SubscriptionService.cancelSubscription(userId);

    res.json({
      success: true,
      message: '–ü–†–û –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
const getSubscriptionPlans = async (req, res) => {
  try {
    const plans = [
      {
        id: 'pro',
        name: '–ü–†–û',
        price: 499,
        currency: 'RUB',
        period: '–º–µ—Å—è—Ü',
        features: [
          'üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö',
          '‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
          'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è',
          'üí¨ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏'
        ],
        popular: true
      },
      {
        id: 'pro_plus',
        name: '–ü–†–û –ü–ª—é—Å',
        price: 999,
        currency: 'RUB',
        period: '–º–µ—Å—è—Ü',
        features: [
          '‚ú® –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ü–†–û',
          'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
          'üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
          'üîù –¢–æ–ø –ø–æ–∑–∏—Ü–∏—è –≤ –ø–æ–∏—Å–∫–µ',
          'üíé –ó–æ–ª–æ—Ç–æ–π –±–µ–π–¥–∂ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
        ],
        popular: false
      }
    ];

    res.json({
      success: true,
      data: plans
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤'
    });
  }
};

module.exports = {
  getUserSubscription,
  createSubscriptionPayment,
  handlePaymentWebhook,
  checkPaymentStatus,
  cancelSubscription,
  getSubscriptionPlans
}; 