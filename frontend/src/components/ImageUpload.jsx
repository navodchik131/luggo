import { useState } from 'react'

const ImageUpload = ({ 
  type = 'single', // 'single' –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞, 'multiple' –¥–ª—è —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  onUpload, 
  maxFiles = 5,
  accept = 'image/*',
  title = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
  description = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'
}) => {
  const [isDragging, setIsDragging] = useState(false)
  const [uploading, setUploading] = useState(false)
  const [selectedFiles, setSelectedFiles] = useState([])

  const handleFileSelect = (files) => {
    const fileArray = Array.from(files)
    
    if (type === 'single' && fileArray.length > 1) {
      alert('–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª')
      return
    }
    
    if (type === 'multiple' && fileArray.length > maxFiles) {
      alert(`–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º ${maxFiles} —Ñ–∞–π–ª–æ–≤`)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ (5MB –º–∞–∫—Å–∏–º—É–º)
    const oversizedFiles = fileArray.filter(file => file.size > 5 * 1024 * 1024)
    if (oversizedFiles.length > 0) {
      alert('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç 5MB')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–æ–≤
    const invalidFiles = fileArray.filter(file => !file.type.startsWith('image/'))
    if (invalidFiles.length > 0) {
      alert('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      return
    }

    setSelectedFiles(fileArray)
  }

  const handleUpload = async () => {
    if (selectedFiles.length === 0) return

    setUploading(true)
    try {
      await onUpload(selectedFiles)
      setSelectedFiles([])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error)
    } finally {
      setUploading(false)
    }
  }

  const handleDragOver = (e) => {
    e.preventDefault()
    setIsDragging(true)
  }

  const handleDragLeave = (e) => {
    e.preventDefault()
    setIsDragging(false)
  }

  const handleDrop = (e) => {
    e.preventDefault()
    setIsDragging(false)
    const files = e.dataTransfer.files
    handleFileSelect(files)
  }

  const handleFileInputChange = (e) => {
    const files = e.target.files
    handleFileSelect(files)
  }

  const removeFile = (index) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index))
  }

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-lg font-medium text-gray-900">{title}</h3>
        <p className="text-sm text-gray-500">{description}</p>
      </div>

      {/* –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <div
        className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
          isDragging 
            ? 'border-blue-500 bg-blue-50' 
            : 'border-gray-300 hover:border-gray-400'
        }`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <div className="space-y-2">
          <div className="text-4xl">üì∑</div>
          <div>
            <label className="cursor-pointer">
              <span className="text-blue-600 hover:text-blue-500 font-medium">
                –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã
              </span>
              <input
                type="file"
                multiple={type === 'multiple'}
                accept={accept}
                onChange={handleFileInputChange}
                className="hidden"
              />
            </label>
            <span className="text-gray-500"> –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏—Ö —Å—é–¥–∞</span>
          </div>
          <div className="text-xs text-gray-400">
            {type === 'single' 
              ? '–ú–∞–∫—Å–∏–º—É–º 5MB' 
              : `–ú–∞–∫—Å–∏–º—É–º ${maxFiles} —Ñ–∞–π–ª–æ–≤ –ø–æ 5MB –∫–∞–∂–¥—ã–π`
            }
          </div>
        </div>
      </div>

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
      {selectedFiles.length > 0 && (
        <div className="space-y-3">
          <h4 className="font-medium">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {selectedFiles.map((file, index) => (
              <div key={index} className="relative">
                <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                  <img
                    src={URL.createObjectURL(file)}
                    alt={`Preview ${index + 1}`}
                    className="w-full h-full object-cover"
                  />
                </div>
                <button
                  onClick={() => removeFile(index)}
                  className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full text-xs hover:bg-red-600"
                >
                  √ó
                </button>
                <div className="text-xs text-gray-500 mt-1 truncate">
                  {file.name}
                </div>
              </div>
            ))}
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          <button
            onClick={handleUpload}
            disabled={uploading}
            className="btn btn-primary w-full disabled:opacity-50"
          >
            {uploading ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                –ó–∞–≥—Ä—É–∂–∞–µ–º...
              </div>
            ) : (
              `–ó–∞–≥—Ä—É–∑–∏—Ç—å ${selectedFiles.length} ${selectedFiles.length === 1 ? '—Ñ–∞–π–ª' : '—Ñ–∞–π–ª–æ–≤'}`
            )}
          </button>
        </div>
      )}
    </div>
  )
}

export default ImageUpload 