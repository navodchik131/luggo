const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–º–µ–Ω –¥–ª—è frontend
const frontendReplacements = [
  {
    pattern: /console\.log\(/g,
    replacement: 'logger.log('
  },
  {
    pattern: /console\.error\(/g,
    replacement: 'logger.error('
  },
  {
    pattern: /console\.warn\(/g,
    replacement: 'logger.warn('
  },
  {
    pattern: /console\.info\(/g,
    replacement: 'logger.info('
  }
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–º–µ–Ω –¥–ª—è backend
const backendReplacements = [
  {
    pattern: /console\.log\(/g,
    replacement: 'logger.debug('
  },
  {
    pattern: /console\.error\(/g,
    replacement: 'logger.error('
  },
  {
    pattern: /console\.warn\(/g,
    replacement: 'logger.warn('
  },
  {
    pattern: /console\.info\(/g,
    replacement: 'logger.info('
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions, excludeDirs = []) {
  let files = [];
  
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (!excludeDirs.includes(item)) {
        files = files.concat(findFiles(fullPath, extensions, excludeDirs));
      }
    } else if (stat.isFile()) {
      const ext = path.extname(item);
      if (extensions.includes(ext)) {
        files.push(fullPath);
      }
    }
  }
  
  return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ logger'–∞
function addLoggerImport(content, filePath) {
  const isBackend = filePath.includes('backend');
  const isJSX = filePath.endsWith('.jsx');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç logger'–∞
  if (content.includes("import logger") || content.includes("import { logger }")) {
    return content;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ logger –≤ —Ñ–∞–π–ª–µ
  if (!content.includes('logger.')) {
    return content;
  }
  
  const importStatement = isBackend 
    ? "import logger from '../utils/logger.js'"
    : "import logger from '../utils/logger'";
  
  // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
  const lines = content.split('\n');
  let insertIndex = 0;
  
  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π import
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].startsWith('import ')) {
      insertIndex = i + 1;
    }
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
  lines.splice(insertIndex, 0, importStatement);
  
  return lines.join('\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
function processFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    const isBackend = filePath.includes('backend');
    const replacements = isBackend ? backendReplacements : frontendReplacements;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    let hasChanges = false;
    for (const { pattern, replacement } of replacements) {
      if (pattern.test(content)) {
        content = content.replace(pattern, replacement);
        hasChanges = true;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç logger'–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (hasChanges) {
      content = addLoggerImport(content, filePath);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–º–µ–Ω—É console.log –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...\n');
  
  const projectRoot = path.join(__dirname, '..');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º frontend —Ñ–∞–π–ª—ã
  console.log('üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º frontend —Ñ–∞–π–ª—ã...');
  const frontendFiles = findFiles(
    path.join(projectRoot, 'frontend', 'src'), 
    ['.js', '.jsx', '.ts', '.tsx'],
    ['node_modules', 'dist', 'build']
  );
  
  let frontendProcessed = 0;
  for (const file of frontendFiles) {
    if (processFile(file)) {
      frontendProcessed++;
    }
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º backend —Ñ–∞–π–ª—ã
  console.log('\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º backend —Ñ–∞–π–ª—ã...');
  const backendFiles = findFiles(
    path.join(projectRoot, 'backend', 'src'), 
    ['.js', '.ts'],
    ['node_modules', 'dist', 'build']
  );
  
  let backendProcessed = 0;
  for (const file of backendFiles) {
    if (processFile(file)) {
      backendProcessed++;
    }
  }
  
  console.log('\nüéâ –ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   Frontend: ${frontendProcessed} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
  console.log(`   Backend: ${backendProcessed} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
  console.log(`   –í—Å–µ–≥–æ: ${frontendProcessed + backendProcessed} —Ñ–∞–π–ª–æ–≤`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

module.exports = { processFile, findFiles }; 