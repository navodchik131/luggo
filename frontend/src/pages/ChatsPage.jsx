import { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { useAuth } from '../hooks/useAuth'
import { useSocket } from '../hooks/useSocket'
import api from '../services/api'
import UserAvatar from '../components/UserAvatar'
import ChatModal from '../components/ChatModal'

const ChatsPage = () => {
  const { user } = useAuth()
  const { onNewMessage, offNewMessage } = useSocket()
  const [chats, setChats] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [selectedChat, setSelectedChat] = useState(null)
  const [chatModalOpen, setChatModalOpen] = useState(false)

  useEffect(() => {
    loadChats()
  }, [])

  // WebSocket —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  useEffect(() => {
    if (user) {
      const handleNewMessage = (messageData) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        loadChats()
      }
      
      onNewMessage(handleNewMessage)
      
      return () => {
        offNewMessage(handleNewMessage)
      }
    }
  }, [user, onNewMessage, offNewMessage])

  const loadChats = async () => {
    try {
      setLoading(true)
      const response = await api.get('/messages/chats')
      
      if (response.data.success) {
        setChats(response.data.chats || [])
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤')
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', err)
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤')
    } finally {
      setLoading(false)
    }
  }

  const openChat = (chat) => {
    setSelectedChat(chat)
    setChatModalOpen(true)
  }

  const formatTime = (dateString) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffInMinutes = Math.floor((now - date) / (1000 * 60))
    
    if (diffInMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ'
    if (diffInMinutes < 60) return `${diffInMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} —á –Ω–∞–∑–∞–¥`
    
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const getStatusColor = (status) => {
    const colors = {
      active: 'text-green-600',
      in_progress: 'text-blue-600',
      awaiting_confirmation: 'text-orange-600',
      completed: 'text-gray-600',
      cancelled: 'text-red-600',
      draft: 'text-gray-500'
    }
    return colors[status] || 'text-gray-600'
  }

  const getStatusText = (status) => {
    const statuses = {
      active: '–ê–∫—Ç–∏–≤–Ω–∞—è',
      in_progress: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
      awaiting_confirmation: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      cancelled: '–û—Ç–º–µ–Ω–µ–Ω–∞',
      draft: '–ß–µ—Ä–Ω–æ–≤–∏–∫'
    }
    return statuses[status] || status
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <div className="text-red-600 text-xl mb-4">{error}</div>
        <button 
          onClick={loadChats}
          className="btn btn-primary"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    )
  }

  return (
    <div className="max-w-4xl mx-auto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">–ú–æ–∏ —á–∞—Ç—ã</h1>
        <div className="text-sm text-gray-600">
          {chats.length} {chats.length === 1 ? '—á–∞—Ç' : chats.length < 5 ? '—á–∞—Ç–∞' : '—á–∞—Ç–æ–≤'}
        </div>
      </div>

      {chats.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üí¨</div>
          <div className="text-xl text-gray-600 mb-2">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤</div>
          <div className="text-gray-500 mb-6">
            {user?.role === 'executor' ? (
              '–û—Ç–∫–ª–∏–∫–∞–π—Ç–µ—Å—å –Ω–∞ –∑–∞—è–≤–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏'
            ) : (
              '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏'
            )}
          </div>
          <Link to="/tasks" className="btn btn-primary">
            {user?.role === 'executor' ? '–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏' : '–ú–æ–∏ –∑–∞—è–≤–∫–∏'}
          </Link>
        </div>
      ) : (
        <div className="space-y-3">
          {chats.map((chat) => (
            <div
              key={`${chat.taskId}-${chat.otherUser.id}`}
              onClick={() => openChat(chat)}
              className="card hover:shadow-md transition-shadow cursor-pointer border-l-4 border-blue-500"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4 flex-1">
                  {/* –ê–≤–∞—Ç–∞—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ */}
                  <UserAvatar user={chat.otherUser} size="lg" />
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ */}
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <h3 className="font-semibold text-lg truncate">
                        {chat.otherUser.name}
                      </h3>
                      {chat.unreadCount > 0 && (
                        <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full font-medium">
                          {chat.unreadCount}
                        </span>
                      )}
                    </div>
                    
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ */}
                    <div className="flex items-center gap-2 text-sm text-gray-600 mb-2">
                      <Link 
                        to={`/tasks/${chat.taskId}`}
                        onClick={(e) => e.stopPropagation()}
                        className="text-blue-600 hover:underline truncate max-w-xs"
                      >
                        {chat.task.title}
                      </Link>
                      <span className="text-gray-400">‚Ä¢</span>
                      <span className={getStatusColor(chat.task.status)}>
                        {getStatusText(chat.task.status)}
                      </span>
                    </div>
                    
                    {/* –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
                    {chat.lastMessage && (
                      <div className="text-sm text-gray-700">
                        <span className="font-medium">
                          {chat.lastMessage.senderId === user.id ? '–í—ã: ' : ''}
                        </span>
                        <span className="truncate max-w-md inline-block">
                          {chat.lastMessage.text}
                        </span>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
                <div className="text-xs text-gray-500 text-right">
                  {chat.lastMessage && formatTime(chat.lastMessage.createdAt)}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞ */}
      {selectedChat && (
        <ChatModal
          isOpen={chatModalOpen}
          onClose={() => {
            setChatModalOpen(false)
            setSelectedChat(null)
            // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            loadChats()
          }}
          task={selectedChat.task}
          otherUser={selectedChat.otherUser}
        />
      )}
    </div>
  )
}

export default ChatsPage 