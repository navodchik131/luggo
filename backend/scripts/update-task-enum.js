const { sequelize } = require('../src/config/database');

const updateTaskEnum = async () => {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ENUM –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ENUM
    await sequelize.query(`
      ALTER TYPE "enum_tasks_category" ADD VALUE IF NOT EXISTS 'garbage';
    `);
    
    console.log('‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ "garbage" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ ENUM');
    console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ENUM:', error);
    
    if (error.message.includes('does not exist')) {
      console.log('üìù ENUM –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É...');
      
      try {
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã - —ç—Ç–æ —É–¥–∞–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ!)
        await sequelize.query('DROP TABLE IF EXISTS tasks CASCADE;');
        console.log('üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ tasks —É–¥–∞–ª–µ–Ω–∞');
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏
        await sequelize.sync({ force: true });
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å –Ω–æ–≤—ã–º ENUM');
        
      } catch (recreateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', recreateError);
      }
    }
  } finally {
    await sequelize.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateTaskEnum(); 