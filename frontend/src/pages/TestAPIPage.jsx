import { useState } from 'react'
import api from '../services/api'

const TestAPIPage = () => {
  const [result, setResult] = useState('')
  const [loading, setLoading] = useState(false)

  const testGetTasks = async () => {
    setLoading(true)
    try {
      const response = await api.get('/tasks')
      setResult(JSON.stringify(response.data, null, 2))
    } catch (error) {
      setResult(`–û—à–∏–±–∫–∞: ${error.message}\n${JSON.stringify(error.response?.data, null, 2)}`)
    }
    setLoading(false)
  }

  const testBackendHealth = async () => {
    setLoading(true)
    try {
      const response = await api.get('/')
      setResult(JSON.stringify(response.data, null, 2))
    } catch (error) {
      setResult(`–û—à–∏–±–∫–∞: ${error.message}\n${JSON.stringify(error.response?.data, null, 2)}`)
    }
    setLoading(false)
  }

  const testCreateTask = async () => {
    setLoading(true)
    try {
      const testData = {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–µ–∑–¥–∞',
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫. –°–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.',
        fromAddress: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1',
        toAddress: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 2',
        date: '2024-12-31',
        category: 'flat'
      }
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testData)
      const response = await api.post('/tasks', testData)
      setResult(JSON.stringify(response.data, null, 2))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:', error)
      setResult(`–û—à–∏–±–∫–∞: ${error.message}\n–°—Ç–∞—Ç—É—Å: ${error.response?.status}\n–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response?.data, null, 2)}`)
    }
    setLoading(false)
  }

  // Test endpoint
  const testEndpoint = async () => {
    try {
      setLoading(true)
      const response = await api.get('/health')
      setResult(response.data)
    } catch (error) {
      setResult({ error: error.message })
    } finally {
      setLoading(false)
    }
  }

  // Test static files
  const testStaticFiles = async () => {
    try {
      setLoading(true)
      const response = await api.get('/test-static')
      setResult(response.data)
    } catch (error) {
      setResult({ error: error.message })
    } finally {
      setLoading(false)
    }
  }

  // Test image loading
  const testImageLoading = () => {
    const testImageUrl = `${import.meta.env.VITE_API_URL || 'http://localhost:5000'}/api/image/avatars/avatar-1749014322450-802973297.jpg`
    setResult({ 
      testImageUrl,
      message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∏–∂–µ. –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç.'
    })
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <button 
          onClick={testBackendHealth}
          disabled={loading}
          className="btn btn-primary"
        >
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Backend
        </button>
        
        <button 
          onClick={testGetTasks}
          disabled={loading}
          className="btn btn-secondary"
        >
          GET /tasks
        </button>
        
        <button 
          onClick={testCreateTask}
          disabled={loading}
          className="btn btn-success"
        >
          POST /tasks (–Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
        </button>
        
        <button 
          onClick={testStaticFiles}
          disabled={loading}
          className="btn btn-primary"
        >
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã
        </button>
        
        <button 
          onClick={testImageLoading}
          disabled={loading}
          className="btn btn-secondary"
        >
          –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        </button>
      </div>

      <div className="bg-gray-100 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
        <pre className="text-sm bg-white p-3 rounded border overflow-auto max-h-96">
          {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : JSON.stringify(result, null, 2) || '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
        </pre>
      </div>

      {/* –¢–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {result?.testImageUrl && (
        <div className="mt-6 p-4 bg-yellow-50 rounded-lg">
          <h3 className="font-semibold mb-2">üñºÔ∏è –¢–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</h3>
          <p className="text-sm text-gray-600 mb-3">{result.message}</p>
          <p className="text-xs text-gray-500 mb-3">URL: {result.testImageUrl}</p>
          <img 
            src={result.testImageUrl} 
            alt="–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" 
            className="w-32 h-32 object-cover border rounded"
            onLoad={() => console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')}
            onError={(e) => console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', e)}
          />
        </div>
      )}
      
      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold mb-2">üîç –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–ª–∞–¥–∫–µ:</h3>
        <ol className="list-decimal list-inside space-y-2 text-sm">
          <li>–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Backend" - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ</li>
          <li>–ó–∞—Ç–µ–º "GET /tasks" - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)</li>
          <li>–î–ª—è "POST /tasks" –Ω—É–∂–Ω–æ –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º - –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É 401</li>
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
        </ol>
      </div>
    </div>
  )
}

export default TestAPIPage 