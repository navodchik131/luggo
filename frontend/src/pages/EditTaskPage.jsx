import { useState, useEffect } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import { useAuth } from '../hooks/useAuth'
import api from '../services/api'
import AddressAutocomplete from '../components/AddressAutocomplete'

const EditTaskPage = () => {
  const navigate = useNavigate()
  const { user } = useAuth()
  const { id } = useParams() // ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [isLoading, setIsLoading] = useState(false)
  const [loadingTask, setLoadingTask] = useState(true)
  const [error, setError] = useState('')
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    fromAddress: '',
    toAddress: '',
    date: '',
    category: 'flat'
  })

  const [errors, setErrors] = useState({})

  const categories = [
    { value: 'flat', label: '–ö–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥' },
    { value: 'office', label: '–û—Ñ–∏—Å–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥' },
    { value: 'intercity', label: '–ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–π –ø–µ—Ä–µ–µ–∑–¥' },
    { value: 'garbage', label: '–í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞' }
  ]

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (id) {
      loadTask()
    }
  }, [id])

  const loadTask = async () => {
    try {
      setLoadingTask(true)
      console.log('–ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', id)
      
      const response = await api.get(`/tasks/${id}`)
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:', response.data)
      
      if (response.data.success) {
        const task = response.data.task
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (task.customer?.id !== user?.id) {
          setError('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏')
          return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å - –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
        if (!['draft', 'active'].includes(task.status)) {
          setError('–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º')
          return
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
        setFormData({
          title: task.title || '',
          description: task.description || '',
          fromAddress: task.fromAddress || '',
          toAddress: task.toAddress || '',
          date: task.date || '',
          category: task.category || 'flat'
        })
      } else {
        setError('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–∫–∏:', err)
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–∫–∏')
    } finally {
      setLoadingTask(false)
    }
  }

  const validateForm = () => {
    const newErrors = {}
    
    if (!formData.title.trim()) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    } else if (formData.title.length < 10) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤'
    }
    
    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    } else if (formData.description.length < 20) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤'
    }
    
    if (!formData.fromAddress.trim()) {
      newErrors.fromAddress = '–ê–¥—Ä–µ—Å –æ—Ç–∫—É–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    }
    
    if (!formData.toAddress.trim()) {
      newErrors.toAddress = '–ê–¥—Ä–µ—Å –∫—É–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    }
    
    if (!formData.date) {
      newErrors.date = '–î–∞—Ç–∞ –ø–µ—Ä–µ–µ–∑–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
    } else {
      const selectedDate = new Date(formData.date)
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      
      if (selectedDate < today) {
        newErrors.date = '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º'
      }
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏...')
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData)
    console.log('üÜî ID –∑–∞—è–≤–∫–∏:', id)
    
    if (!validateForm()) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞')
      return
    }
    
    setIsLoading(true)
    setError('')
    
    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', `/api/tasks/${id}`)
      const response = await api.put(`/tasks/${id}`, formData)
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data)
      
      if (response.data.success) {
        console.log('üéâ –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...')
        navigate(`/tasks/${id}`)
      } else {
        console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª success: false')
        setError(response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }
    } catch (err) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', err)
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        status: err.response?.status,
        statusText: err.response?.statusText,
        data: err.response?.data,
        message: err.message
      })
      
      setError(
        err.response?.data?.message || 
        `–û—à–∏–±–∫–∞ ${err.response?.status || '—Å–µ—Ç–∏'}: ${err.message}`
      )
    } finally {
      setIsLoading(false)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (!user) {
    return (
      <div className="text-center py-8">
        <h2 className="text-2xl font-bold mb-4">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
        <p className="text-gray-600 mb-4">–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        <button 
          onClick={() => navigate('/login')}
          className="btn btn-primary"
        >
          –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
        </button>
      </div>
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (user.role === 'executor') {
    return (
      <div className="text-center py-8">
        <div className="text-4xl mb-4">‚ö†Ô∏è</div>
        <h2 className="text-2xl font-bold mb-4">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
        <p className="text-gray-600 mb-4">
          –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
        </p>
        <div className="flex gap-3 justify-center">
          <button 
            onClick={() => navigate('/tasks')}
            className="btn btn-primary"
          >
            –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏
          </button>
          <button 
            onClick={() => navigate(`/tasks/${id}`)}
            className="btn btn-secondary"
          >
            –ö –∑–∞—è–≤–∫–µ
          </button>
        </div>
      </div>
    )
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
  if (loadingTask) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–∞
  if (error && !formData.title) {
    return (
      <div className="text-center py-8">
        <div className="text-4xl mb-4">‚ùå</div>
        <h2 className="text-2xl font-bold mb-4">–û—à–∏–±–∫–∞</h2>
        <p className="text-gray-600 mb-4">{error}</p>
        <div className="flex gap-3 justify-center">
          <button 
            onClick={() => navigate('/tasks')}
            className="btn btn-primary"
          >
            –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
          </button>
          <button 
            onClick={() => navigate(`/tasks/${id}`)}
            className="btn btn-secondary"
          >
            –ö –∑–∞—è–≤–∫–µ
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold mb-8">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É</h1>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="card">
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6">
              {error}
            </div>
          )}

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-6">
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
              –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏ *
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.title ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–µ–∑–¥ 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã"
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{errors.title}</p>
            )}
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div className="mb-6">
            <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-2">
              –¢–∏–ø –ø–µ—Ä–µ–µ–∑–¥–∞ *
            </label>
            <select
              id="category"
              name="category"
              value={formData.category}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {categories.map(cat => (
                <option key={cat.value} value={cat.value}>
                  {cat.label}
                </option>
              ))}
            </select>
          </div>

          {/* –ê–¥—Ä–µ—Å–∞ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <AddressAutocomplete
              label="–û—Ç–∫—É–¥–∞"
              value={formData.fromAddress}
              onChange={(e) => handleChange({ target: { name: 'fromAddress', value: e.target.value } })}
              placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –ü–µ—Ä–º–∏..."
              required={true}
              error={errors.fromAddress}
            />

            <AddressAutocomplete
              label="–ö—É–¥–∞"
              value={formData.toAddress}
              onChange={(e) => handleChange({ target: { name: 'toAddress', value: e.target.value } })}
              placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –ü–µ—Ä–º–∏..."
              required={true}
              error={errors.toAddress}
            />
          </div>

          {/* –î–∞—Ç–∞ */}
          <div className="mb-6">
            <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-2">
              –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–µ–∑–¥–∞ *
            </label>
            <input
              type="date"
              id="date"
              name="date"
              value={formData.date}
              onChange={handleChange}
              min={new Date().toISOString().split('T')[0]}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.date ? 'border-red-500' : 'border-gray-300'
              }`}
            />
            {errors.date && (
              <p className="mt-1 text-sm text-red-600">{errors.date}</p>
            )}
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="mb-6">
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
              –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              rows={4}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.description ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–µ–∑–¥–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, —ç—Ç–∞–∂, –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ñ—Ç–∞, –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è..."
            />
            {errors.description && (
              <p className="mt-1 text-sm text-red-600">{errors.description}</p>
            )}
            <p className="mt-1 text-xs text-gray-500">
              –ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥—É—Ç –æ—Ç–∫–ª–∏–∫–∏.
            </p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-4 pt-6">
            <button
              type="submit"
              disabled={isLoading}
              className="btn btn-primary flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
            </button>
            
            <button
              type="button"
              onClick={() => navigate(`/tasks/${id}`)}
              className="btn btn-secondary px-6"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      </form>
    </div>
  )
}

export default EditTaskPage 