import logger from '../utils/logger.js'
const { Review, Task, User, Bid } = require('../models');
const { body, validationResult } = require('express-validator');

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –æ—Ç–∑—ã–≤–æ–º
const confirmTaskCompletion = async (req, res) => {
  try {
    const { taskId } = req.params;
    const userId = req.user.id;
    const { rating, comment, confirmed } = req.body;

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É
    const task = await Task.findByPk(taskId, {
      include: [
        {
          model: Bid,
          as: 'bids',
          where: { accepted: true },
          include: [
            {
              model: User,
              as: 'executor',
              attributes: ['id', 'name', 'email', 'rating']
            }
          ]
        }
      ]
    });

    if (!task) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (task.userId !== userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    if (task.status !== 'awaiting_confirmation') {
      return res.status(400).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
      });
    }

    const acceptedBid = task.bids[0];
    const executorId = acceptedBid.userId;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞
    if (confirmed && rating) {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          errors: errors.array()
        });
      }
    }

    if (confirmed) {
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await task.update({ status: 'completed' });

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥
      if (rating) {
        await Review.create({
          rating: parseInt(rating),
          comment: comment || '',
          taskId,
          authorId: userId,
          targetId: executorId
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const reviews = await Review.findAll({
          where: { targetId: executorId }
        });
        
        const avgRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;
        
        await User.update(
          { rating: avgRating },
          { where: { id: executorId } }
        );

        logger.debug(`‚úÖ –û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω. –ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${avgRating.toFixed(2)}`);
      }

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const { Notification } = require('../models');
      await Notification.create({
        userId: executorId,
        type: 'task_completed',
        title: 'üéâ –†–∞–±–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!',
        message: `–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã "${task.title}". ${rating ? `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ü–µ–Ω–∫—É ${rating}/5.` : ''}`,
        data: {
          taskId,
          rating: rating || null,
          hasReview: !!rating
        }
      });

      res.json({
        success: true,
        message: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
        task,
        reviewCreated: !!rating
      });
    } else {
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–∞–±–æ—Ç—É
      await task.update({ status: 'in_progress' });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const { Notification } = require('../models');
      await Notification.create({
        userId: executorId,
        type: 'task_completed',
        title: 'üîÑ –ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏',
        message: `–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã "${task.title}". ${comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}` : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º.'}`,
        data: {
          taskId,
          requiresWork: true,
          customerComment: comment || null
        }
      });

      res.json({
        success: true,
        message: '–†–∞–±–æ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É',
        task
      });
    }

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
const createReview = async (req, res) => {
  try {
    const { taskId } = req.params;
    const { rating, comment } = req.body;
    const authorId = req.user.id;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        errors: errors.array()
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É
    const task = await Task.findByPk(taskId, {
      include: [
        {
          model: Bid,
          as: 'bids',
          where: { accepted: true }
        }
      ]
    });

    if (!task) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –∫–æ–º—É —Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤
    let targetId;
    if (task.userId === authorId) {
      // –ó–∞–∫–∞–∑—á–∏–∫ —Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
      targetId = task.bids[0].userId;
    } else if (task.bids[0].userId === authorId) {
      // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤ –∑–∞–∫–∞–∑—á–∏–∫—É
      targetId = task.userId;
    } else {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (task.status !== 'completed') {
      return res.status(400).json({
        success: false,
        message: '–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤–∞
    const existingReview = await Review.findOne({
      where: { taskId, authorId, targetId }
    });

    if (existingReview) {
      return res.status(400).json({
        success: false,
        message: '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
    const review = await Review.create({
      rating: parseInt(rating),
      comment,
      taskId,
      authorId,
      targetId
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const reviews = await Review.findAll({
      where: { targetId }
    });
    
    const avgRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;
    
    await User.update(
      { rating: avgRating },
      { where: { id: targetId } }
    );

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
    const createdReview = await Review.findByPk(review.id, {
      include: [
        {
          model: User,
          as: 'author',
          attributes: ['id', 'name']
        },
        {
          model: User,
          as: 'target',
          attributes: ['id', 'name', 'rating']
        }
      ]
    });

    res.status(201).json({
      success: true,
      message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      review: createdReview
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserReviews = async (req, res) => {
  try {
    const { userId } = req.params;
    const { page = 1, limit = 10 } = req.query;
    const offset = (page - 1) * limit;

    const reviews = await Review.findAndCountAll({
      where: { targetId: userId },
      include: [
        {
          model: User,
          as: 'author',
          attributes: ['id', 'name']
        },
        {
          model: Task,
          as: 'task',
          attributes: ['id', 'title', 'category']
        }
      ],
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.json({
      success: true,
      reviews: reviews.rows,
      pagination: {
        total: reviews.count,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(reviews.count / limit)
      }
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤'
    });
  }
};

// –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
const validateConfirmCompletion = [
  body('confirmed')
    .isBoolean()
    .withMessage('–ü–æ–ª–µ confirmed –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º'),
  body('rating')
    .optional()
    .isInt({ min: 1, max: 5 })
    .withMessage('–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5'),
  body('comment')
    .optional()
    .trim()
    .isLength({ max: 1000 })
    .withMessage('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤')
];

const validateCreateReview = [
  body('rating')
    .isInt({ min: 1, max: 5 })
    .withMessage('–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5'),
  body('comment')
    .optional()
    .trim()
    .isLength({ max: 1000 })
    .withMessage('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤')
];

module.exports = {
  confirmTaskCompletion,
  createReview,
  getUserReviews,
  validateConfirmCompletion,
  validateCreateReview
}; 