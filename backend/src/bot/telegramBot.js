const TelegramBot = require('node-telegram-bot-api');
const { TelegramUser, User } = require('../models');
const bcrypt = require('bcryptjs');
const { Op } = require('sequelize');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ .env)
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
if (process.env.TELEGRAM_BOT_DISABLED) {
  console.log('üîá Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω (TELEGRAM_BOT_DISABLED=true) –≤ telegramBot.js');
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏
  module.exports = {
    bot: null,
    sendTaskNotification: () => console.log('üîá Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
  };
  return;
}

// –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const isProduction = process.env.NODE_ENV === 'production';
const WEBHOOK_URL = process.env.FRONTEND_URL ? `${process.env.FRONTEND_URL}/webhook/telegram` : null;

let bot;

// –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîß –û–¢–õ–ê–î–ö–ê: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω polling —Ä–µ–∂–∏–º');
bot = new TelegramBot(BOT_TOKEN, { polling: true });
console.log('üîÑ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling (–æ—Ç–ª–∞–¥–∫–∞)');

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫
const CATEGORIES = {
  flat: 'üè† –ö–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥',
  office: 'üè¢ –û—Ñ–∏—Å–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥', 
  intercity: 'üöõ –ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–π –ø–µ—Ä–µ–µ–∑–¥',
  garbage: 'üóëÔ∏è –í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞'
};

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authSessions = new Map();

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    let telegramUser = await TelegramUser.findOne({ 
      where: { telegramId },
      include: [{ model: User, as: 'user' }]
    });
    
    if (telegramUser && telegramUser.user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      await showMainMenu(chatId, telegramUser);
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (!telegramUser) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        telegramUser = await TelegramUser.create({
          telegramId,
          telegramUsername: msg.from.username,
          telegramFirstName: msg.from.first_name
        });
      }
      
      await showAuthMessage(chatId);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function showAuthMessage(chatId) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', callback_data: 'auth_start' }]
    ]
  };
  
  await bot.sendMessage(chatId, 
    `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ Luggo!\n\n` +
    `–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –ø–µ—Ä–µ–µ–∑–¥.\n\n` +
    `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –æ—Ç —Å–∞–π—Ç–∞.`,
    { reply_markup: keyboard }
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId, telegramUser) {
  if (!telegramUser || !telegramUser.user) {
    console.error('‚ùå telegramUser –∏–ª–∏ user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ showMainMenu');
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  
  const categories = telegramUser.subscribedCategories || [];
  
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'settings_categories' }],
      [{ text: 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }],
      [{ text: categories.length > 0 ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 
         callback_data: telegramUser.isActive ? 'notifications_off' : 'notifications_on' }],
      [{ text: '‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data: 'logout' }]
    ]
  };
  
  await bot.sendMessage(chatId, 
    `üëã –ü—Ä–∏–≤–µ—Ç, ${telegramUser.user.name}!\n\n` +
    `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${telegramUser.isActive ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n` +
    `üìÇ –ü–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.length}\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    { reply_markup: keyboard }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const telegramId = query.from.id.toString();
  const data = query.data;
  
  try {
    await bot.answerCallbackQuery(query.id);
    
    if (data === 'auth_start') {
      // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      authSessions.set(telegramId, { step: 'email' });
      await bot.sendMessage(chatId, 'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Luggo:');
      
    } else if (data === 'settings_categories') {
      await showCategoriesSettings(chatId, telegramId);
      
    } else if (data === 'my_subscriptions') {
      await showSubscriptions(chatId, telegramId);
      
    } else if (data === 'notifications_on' || data === 'notifications_off') {
      await toggleNotifications(chatId, telegramId, data === 'notifications_on');
      
    } else if (data === 'logout') {
      await logoutUser(chatId, telegramId);
      
    } else if (data.startsWith('category_')) {
      await toggleCategory(chatId, telegramId, data.replace('category_', ''));
      
    } else if (data === 'back_to_menu') {
      const telegramUser = await TelegramUser.findOne({ 
        where: { telegramId },
        include: [{ model: User, as: 'user' }]
      });
      if (telegramUser) {
        await showMainMenu(chatId, telegramUser);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();
  const text = msg.text;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text && text.startsWith('/')) return;
  
  const session = authSessions.get(telegramId);
  if (!session) return;
  
  try {
    if (session.step === 'email') {
      session.email = text.trim();
      session.step = 'password';
      await bot.sendMessage(chatId, 'üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:');
      
    } else if (session.step === 'password') {
      const { email } = session;
      const password = text.trim();
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      const user = await User.findOne({ where: { email } });
      
      console.log(`üîç Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: email=${email}`);
      
      if (!user) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${email}`);
        await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        authSessions.delete(telegramId);
        await showAuthMessage(chatId);
        return;
      }
      
      console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name}, —Ä–æ–ª—å: "${user.role}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isValidPassword = await bcrypt.compare(password, user.password);
      
      if (!isValidPassword) {
        console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è: ${email}`);
        await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.');
        authSessions.delete(telegramId);
        await showAuthMessage(chatId);
        return;
      }
      
      console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π –¥–ª—è: ${email}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user.role !== 'executor') {
        console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: "${user.role}" !== "executor" –¥–ª—è ${email}`);
        await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.');
        authSessions.delete(telegramId);
        await showAuthMessage(chatId);
        return;
      }
      
      console.log(`‚úÖ –†–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è: ${email}`);
      
      // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      await TelegramUser.update(
        { userId: user.id, lastActiveAt: new Date() },
        { where: { telegramId } }
      );
      
      authSessions.delete(telegramId);
      
      const telegramUser = await TelegramUser.findOne({ 
        where: { telegramId },
        include: [{ model: User, as: 'user' }]
      });
      
      if (!telegramUser) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ telegramUser –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
        return;
      }
      
      await bot.sendMessage(chatId, '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      await showMainMenu(chatId, telegramUser);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    authSessions.delete(telegramId);
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function showCategoriesSettings(chatId, telegramId) {
  const telegramUser = await TelegramUser.findOne({ where: { telegramId } });
  const subscribedCategories = telegramUser.subscribedCategories || [];
  
  const keyboard = {
    inline_keyboard: [
      ...Object.entries(CATEGORIES).map(([key, label]) => [
        { 
          text: `${subscribedCategories.includes(key) ? '‚úÖ' : '‚ùå'} ${label}`, 
          callback_data: `category_${key}` 
        }
      ]),
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };
  
  await bot.sendMessage(chatId, 
    '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
    { reply_markup: keyboard }
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
async function showSubscriptions(chatId, telegramId) {
  const telegramUser = await TelegramUser.findOne({ where: { telegramId } });
  const subscribedCategories = telegramUser.subscribedCategories || [];
  
  let message = 'üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n';
  
  if (subscribedCategories.length === 0) {
    message += '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n';
  } else {
    subscribedCategories.forEach(category => {
      message += `‚úÖ ${CATEGORIES[category]}\n`;
    });
    message += '\n';
  }
  
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'settings_categories' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };
  
  await bot.sendMessage(chatId, message, { reply_markup: keyboard });
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
async function toggleCategory(chatId, telegramId, category) {
  const telegramUser = await TelegramUser.findOne({ where: { telegramId } });
  let subscribedCategories = telegramUser.subscribedCategories || [];
  
  if (subscribedCategories.includes(category)) {
    subscribedCategories = subscribedCategories.filter(c => c !== category);
  } else {
    subscribedCategories.push(category);
  }
  
  await TelegramUser.update(
    { subscribedCategories },
    { where: { telegramId } }
  );
  
  await showCategoriesSettings(chatId, telegramId);
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function toggleNotifications(chatId, telegramId, isActive) {
  await TelegramUser.update(
    { isActive },
    { where: { telegramId } }
  );
  
  const telegramUser = await TelegramUser.findOne({ 
    where: { telegramId },
    include: [{ model: User, as: 'user' }]
  });
  
  await bot.sendMessage(chatId, 
    `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${isActive ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`
  );
  
  await showMainMenu(chatId, telegramUser);
}

// –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
async function logoutUser(chatId, telegramId) {
  await TelegramUser.update(
    { userId: null },
    { where: { telegramId } }
  );
  
  await bot.sendMessage(chatId, 'üëã –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
  await showAuthMessage(chatId);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
async function sendTaskNotification(task) {
  try {
    console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–µ:', task.id);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ü–†–û –∞–∫–∫–∞—É–Ω—Ç–æ–º
    const telegramUsers = await TelegramUser.findAll({
      where: {
        isActive: true,
        subscribedCategories: {
          [Op.contains]: [task.category]
        }
      },
      include: [{
        model: User,
        as: 'user',
        where: {
          role: 'executor',
          hasPro: true,  // üéØ –¢–æ–ª—å–∫–æ –ü–†–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!
          proExpiresAt: {
            [Op.gt]: new Date()  // –ü–†–û –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞
          }
        }
      }]
    });

    if (telegramUsers.length === 0) {
      console.log('üì≠ –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –ü–†–û –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', task.category);
      return;
    }

    console.log(`üì§ –ù–∞–π–¥–µ–Ω–æ ${telegramUsers.length} –ü–†–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const categoryNames = {
      'flat': 'üè† –ö–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥',
      'office': 'üè¢ –û—Ñ–∏—Å–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥', 
      'intercity': 'üöö –ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ—Ä–µ–µ–∑–¥',
      'garbage': 'üóëÔ∏è –í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞'
    };

    const message = `üî• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n` +
      `üìã *${task.title}*\n` +
      `üìç –û—Ç–∫—É–¥–∞: ${task.fromAddress}\n` +
      `üìç –ö—É–¥–∞: ${task.toAddress}\n` +
      `üìÖ –î–∞—Ç–∞: ${new Date(task.date).toLocaleDateString('ru-RU')}\n` +
      `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryNames[task.category] || task.category}\n\n` +
      `üí∞ *–¢–æ–ª—å–∫–æ –¥–ª—è –ü–†–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!*\n\n` +
      `üëÄ [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É](${process.env.FRONTEND_URL}/tasks/${task.id})`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for (const telegramUser of telegramUsers) {
      try {
        await bot.sendMessage(telegramUser.telegramId, message, {
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[
              { text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', url: `${process.env.FRONTEND_URL}/tasks/${task.id}` },
              { text: 'üíº –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', url: `${process.env.FRONTEND_URL}/tasks/${task.id}#bid` }
            ]]
          }
        });
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: @${telegramUser.user.name}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramUser.telegramId}:`, error.message);
      }
    }

    console.log('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ü–†–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

module.exports = {
  bot,
  sendTaskNotification
}; 