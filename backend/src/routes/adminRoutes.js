const express = require('express');
const { protect } = require('../middleware/authMiddleware');
const { adminOnly } = require('../middleware/adminMiddleware');
const {
  getDashboardStats,
  getAllUsers,
  toggleUserBlock,
  getAllTasks,
  deleteTask,
  updateTaskStatus,
  getReports,
  deleteUser
} = require('../controllers/adminController');

const router = express.Router();

// –í—Å–µ —Ä–æ—É—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
router.use(protect);
router.use(adminOnly);

// –î–∞—à–±–æ—Ä–¥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
router.get('/dashboard', getDashboardStats);
router.get('/reports', getReports);

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
router.get('/users', getAllUsers);
router.patch('/users/:userId/toggle-block', toggleUserBlock);
router.delete('/users/:userId', deleteUser);

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
router.get('/tasks', getAllTasks);
router.patch('/tasks/:taskId/status', updateTaskStatus);
router.delete('/tasks/:taskId', deleteTask);

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
router.post('/seed-demo-data', async (req, res) => {
  try {
    const { seedDatabase } = require('../../scripts/seedDatabase');
    
    console.log('üå± –ê–¥–º–∏–Ω –∑–∞–ø—É—Å—Ç–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    const demoData = await seedDatabase();
    
    // –ó–¥–µ—Å—å –±—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    res.json({
      success: true,
      message: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
      data: {
        users: demoData.users.length,
        tasks: demoData.tasks.length,
        bids: demoData.bids.length,
        messages: demoData.messages.length,
        news: demoData.news.length,
        reviews: demoData.reviews.length
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö',
      error: error.message
    });
  }
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
router.post('/clear-all-data', async (req, res) => {
  try {
    if (process.env.NODE_ENV === 'production') {
      return res.status(403).json({
        success: false,
        message: '–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ'
      });
    }
    
    // –ó–¥–µ—Å—å –±—ã –æ—á–∏—Å—Ç–∏–ª–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üóëÔ∏è –ê–¥–º–∏–Ω –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
    
    res.json({
      success: true,
      message: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
      error: error.message
    });
  }
});

module.exports = router; 