const bcrypt = require('bcryptjs');
const { demoUsers, demoTasks, demoNews } = require('./seedData');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
const generateId = () => {
  return Date.now().toString() + Math.random().toString(36).substr(2, 9);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–æ—Ç–∫–ª–∏–∫–æ–≤
const generateBids = (tasks, users) => {
  const executors = users.filter(u => u.role === 'executor');
  const bids = [];
  
  tasks.forEach((task, taskIndex) => {
    if (task.status === 'active' || task.status === 'in_progress' || task.status === 'completed') {
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –æ—Ç 2 –¥–æ 5
      const bidCount = Math.floor(Math.random() * 4) + 2;
      
      for (let i = 0; i < bidCount && i < executors.length; i++) {
        const executor = executors[i];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let basePrice;
        switch (task.category) {
          case 'flat': basePrice = 12000; break;
          case 'office': basePrice = 35000; break;
          case 'intercity': basePrice = 75000; break;
          case 'garbage': basePrice = 5000; break;
          default: basePrice = 15000;
        }
        
        const price = basePrice + Math.floor(Math.random() * 10000) - 5000;
        
        const comments = [
          '–í—ã–ø–æ–ª–Ω–∏–º —Ä–∞–±–æ—Ç—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫. –ï—Å—Ç—å –≤–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.',
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, —Ä–∞–±–æ—Ç–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–µ—â–µ–π.',
          '–ë–æ–ª—å—à–æ–π –æ–ø—ã—Ç –ø–æ–¥–æ–±–Ω—ã—Ö —Ä–∞–±–æ—Ç. –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å.',
          '–ú–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç.',
          '–ö–æ–º–∞–Ω–¥–∞ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –†–∞–±–æ—Ç–∞–µ–º –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.'
        ];
        
        bids.push({
          id: generateId(),
          taskId: task.id,
          userId: executor.id,
          price: price,
          comment: comments[Math.floor(Math.random() * comments.length)],
          accepted: task.status === 'in_progress' && i === 0,
          createdAt: new Date(Date.now() - Math.floor(Math.random() * 5) * 24 * 60 * 60 * 1000)
        });
      }
    }
  });
  
  return bids;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π
const generateMessages = (tasks, bids, users) => {
  const messages = [];
  
  bids.forEach(bid => {
    const task = tasks.find(t => t.id === bid.taskId);
    const executor = users.find(u => u.id === bid.userId);
    const customer = users.find(u => u.id === task.userId);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    if (Math.random() > 0.3) { // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
      
      // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
      messages.push({
        id: generateId(),
        taskId: task.id,
        senderId: customer.id,
        receiverId: executor.id,
        text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à –æ—Ç–∫–ª–∏–∫. –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
        read: true,
        createdAt: new Date(bid.createdAt.getTime() + 60 * 60 * 1000) // —á–∞—Å –ø–æ—Å–ª–µ –æ—Ç–∫–ª–∏–∫–∞
      });
      
      // –û—Ç–≤–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      messages.push({
        id: generateId(),
        taskId: task.id,
        senderId: executor.id,
        receiverId: customer.id,
        text: '–ö–æ–Ω–µ—á–Ω–æ! –†–∞–±–æ—Ç–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –≤—Å–µ –≤–µ—â–∏ —É–ø–∞–∫—É–µ–º, –¥–æ—Å—Ç–∞–≤–∏–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ. –ú–æ–∂–µ–º –ø—Ä–∏–µ—Ö–∞—Ç—å –Ω–∞ –æ—Å–º–æ—Ç—Ä.',
        read: Math.random() > 0.2,
        createdAt: new Date(bid.createdAt.getTime() + 2 * 60 * 60 * 1000)
      });
      
      if (Math.random() > 0.5) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages.push({
          id: generateId(),
          taskId: task.id,
          senderId: customer.id,
          receiverId: executor.id,
          text: '–ê —á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å? –£–ø–∞–∫–æ–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã?',
          read: true,
          createdAt: new Date(bid.createdAt.getTime() + 3 * 60 * 60 * 1000)
        });
        
        messages.push({
          id: generateId(),
          taskId: task.id,
          senderId: executor.id,
          receiverId: customer.id,
          text: '–î–∞, –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã: –ø–ª–µ–Ω–∫–∞, –∫–∞—Ä—Ç–æ–Ω, —Å–∫–æ—Ç—á. –¢–∞–∫–∂–µ –≤—Ö–æ–¥–∏—Ç —Ä–∞–∑–±–æ—Ä–∫–∞/—Å–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏.',
          read: Math.random() > 0.3,
          createdAt: new Date(bid.createdAt.getTime() + 4 * 60 * 60 * 1000)
        });
      }
    }
  });
  
  return messages;
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const seedDatabase = async () => {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏...');
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = [];
    
    for (let i = 0; i < demoUsers.length; i++) {
      const userData = demoUsers[i];
      const hashedPassword = await bcrypt.hash(userData.password, 10);
      
      const user = {
        id: generateId(),
        name: userData.name,
        email: userData.email,
        phone: userData.phone,
        password: hashedPassword,
        role: userData.role,
        avatar: userData.avatar,
        rating: userData.rating,
        experience: userData.experience || null,
        services: userData.services || null,
        createdAt: userData.createdAt
      };
      
      users.push(user);
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏
    console.log('üìã –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∑–∞—è–≤–∫–∏...');
    const tasks = [];
    
    for (let i = 0; i < demoTasks.length; i++) {
      const taskData = demoTasks[i];
      const customer = users[taskData.customerIndex];
      
      const task = {
        id: generateId(),
        title: taskData.title,
        description: taskData.description,
        fromAddress: taskData.fromAddress,
        toAddress: taskData.toAddress,
        date: taskData.date,
        category: taskData.category,
        status: taskData.status,
        userId: customer.id,
        createdAt: new Date(Date.now() - Math.floor(Math.random() * 15) * 24 * 60 * 60 * 1000)
      };
      
      tasks.push(task);
    }
    
    // 3. –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏
    console.log('üíº –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–æ—Ç–∫–ª–∏–∫–∏...');
    const bids = generateBids(tasks, users);
    
    // 4. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('üí¨ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è...');
    const messages = generateMessages(tasks, bids, users);
    
    // 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    console.log('üì∞ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–Ω–æ–≤–æ—Å—Ç–∏...');
    const news = [];
    
    for (let i = 0; i < demoNews.length; i++) {
      const newsData = demoNews[i];
      
      const article = {
        id: generateId(),
        title: newsData.title,
        slug: newsData.slug,
        excerpt: newsData.excerpt,
        content: newsData.content,
        imageUrl: newsData.imageUrl,
        tags: JSON.stringify(newsData.tags),
        status: newsData.status,
        views: newsData.views,
        publishedAt: newsData.publishedAt,
        createdAt: newsData.publishedAt
      };
      
      news.push(article);
    }
    
    // 6. –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤—ã
    console.log('‚≠ê –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–æ—Ç–∑—ã–≤—ã...');
    const reviews = [];
    
    const completedTasks = tasks.filter(t => t.status === 'completed');
    completedTasks.forEach(task => {
      const acceptedBid = bids.find(b => b.taskId === task.id && b.accepted);
      if (acceptedBid) {
        const customer = users.find(u => u.id === task.userId);
        const executor = users.find(u => u.id === acceptedBid.userId);
        
        // –û—Ç–∑—ã–≤ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        reviews.push({
          id: generateId(),
          taskId: task.id,
          authorId: customer.id,
          targetId: executor.id,
          rating: Math.floor(Math.random() * 2) + 4, // 4 –∏–ª–∏ 5 –∑–≤–µ–∑–¥
          comment: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ —Å–¥–µ–ª–∞–ª–∏ –±—ã—Å—Ç—Ä–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é!',
          createdAt: new Date(task.createdAt.getTime() + 24 * 60 * 60 * 1000)
        });
        
        // –û—Ç–∑—ã–≤ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫ –∑–∞–∫–∞–∑—á–∏–∫—É (–∏–Ω–æ–≥–¥–∞)
        if (Math.random() > 0.3) {
          reviews.push({
            id: generateId(),
            taskId: task.id,
            authorId: executor.id,
            targetId: customer.id,
            rating: Math.floor(Math.random() * 2) + 4,
            comment: '–ü—Ä–∏—è—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑—á–∏–∫–æ–º. –°–ø–∞—Å–∏–±–æ!',
            createdAt: new Date(task.createdAt.getTime() + 25 * 60 * 60 * 1000)
          });
        }
      }
    });
    
    console.log('‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}
    üìã –ó–∞—è–≤–∫–∏: ${tasks.length}  
    üíº –û—Ç–∫–ª–∏–∫–∏: ${bids.length}
    üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: ${messages.length}
    üì∞ –ù–æ–≤–æ—Å—Ç–∏: ${news.length}
    ‚≠ê –û—Ç–∑—ã–≤—ã: ${reviews.length}`);
    
    return {
      users,
      tasks,
      bids,
      messages,
      news,
      reviews
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ
module.exports = {
  seedDatabase,
  generateId
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedDatabase()
    .then((data) => {
      console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏!');
      console.log('–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ä–∞–±–æ—á–∞—è —Å–∏—Å—Ç–µ–º–∞.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –û—à–∏–±–∫–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      process.exit(1);
    });
} 