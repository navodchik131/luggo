// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ console.log –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
const { Task, User, Bid } = require('../models');
const { body, validationResult } = require('express-validator');
const { Op } = require('sequelize');
const { sendTaskNotification } = require('../bot/telegramBot');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
const getTasks = async (req, res) => {
  try {
    const { page = 1, limit = 10, category, status, search } = req.query;
    const offset = (page - 1) * limit;
    const userId = req.user?.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

    const whereClause = {};
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category) {
      whereClause.category = category;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status) {
      whereClause.status = status;
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏—é
    if (search) {
      whereClause[Op.or] = [
        { title: { [Op.iLike]: `%${search}%` } },
        { description: { [Op.iLike]: `%${search}%` } }
      ];
    }

    const includeModels = [
      {
        model: User,
        as: 'customer',
        attributes: ['id', 'name', 'email', 'rating', 'avatar']
      }
    ];

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–∫–ª–∏–∫–∏
    if (userId) {
      includeModels.push({
        model: Bid,
        as: 'bids',
        where: { userId },
        required: false, // LEFT JOIN —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –¥–∞–∂–µ –±–µ–∑ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        attributes: ['id', 'price', 'accepted', 'createdAt'],
        include: [
          {
            model: User,
            as: 'executor',
            attributes: ['id', 'name', 'avatar']
          }
        ]
      });
    }

    const tasks = await Task.findAndCountAll({
      where: whereClause,
      include: includeModels,
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const processedTasks = tasks.rows.map(task => {
      const taskData = task.toJSON();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –æ—Ç–∫–ª–∏–∫
      if (userId && taskData.bids && taskData.bids.length > 0) {
        taskData.userBid = taskData.bids[0]; // –ü–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫ —ç—Ç–æ –æ—Ç–∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete taskData.bids; // –£–¥–∞–ª—è–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
      } else {
        taskData.userBid = null;
        delete taskData.bids;
      }
      
      return taskData;
    });

    res.json({
      success: true,
      tasks: processedTasks,
      pagination: {
        total: tasks.count,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(tasks.count / limit)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
const getTaskById = async (req, res) => {
  try {
    const { id } = req.params;

    const task = await Task.findByPk(id, {
      include: [
        {
          model: User,
          as: 'customer',
          attributes: ['id', 'name', 'email', 'rating', 'avatar', 'createdAt']
        },
        {
          model: Bid,
          as: 'bids',
          include: [
            {
              model: User,
              as: 'executor',
              attributes: ['id', 'name', 'email', 'rating', 'avatar']
            }
          ],
          order: [['createdAt', 'DESC']]
        }
      ]
    });

    if (!task) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏'
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
const createTask = async (req, res) => {
  try {
    console.log('=== –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ó–ê–î–ê–ß–ò ===');
    console.log('req.user:', req.user);
    console.log('req.body:', req.body);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!req.user || !req.user.id) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ - —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
    if (req.user.role === 'executor') {
      console.log('‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏');
      return res.status(403).json({
        success: false,
        message: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏. –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏.'
      });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors.array());
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        errors: errors.array()
      });
    }

    const { title, description, fromAddress, toAddress, date, category } = req.body;
    
    const userId = req.user.id;
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', {
      title, description, fromAddress, toAddress, date, category, userId
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.log('üìù –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –≤ –ë–î...');
    const task = await Task.create({
      title,
      description,
      fromAddress,
      toAddress,
      date,
      category,
      userId,
      status: 'active'
    });
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', task.toJSON());

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    console.log('üìÑ –ü–æ–ª—É—á–∞—é –∑–∞–¥–∞—á—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const createdTask = await Task.findByPk(task.id, {
      include: [
        {
          model: User,
          as: 'customer',
          attributes: ['id', 'name', 'email', 'rating']
        }
      ]
    });
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', createdTask ? createdTask.toJSON() : 'null');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    try {
      console.log('üì≤ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...');
      await sendTaskNotification(createdTask.toJSON());
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
    } catch (notificationError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }

    res.status(201).json({
      success: true,
      message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      task: createdTask
    });
    console.log('=== –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê –£–°–ü–ï–®–ù–û ===');
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏',
      debug: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
const updateTask = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, fromAddress, toAddress, date, category, status } = req.body;
    const userId = req.user.id;

    const task = await Task.findByPk(id);

    if (!task) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
    if (task.userId !== userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏'
      });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
    const updateData = {};
    if (title !== undefined) updateData.title = title;
    if (description !== undefined) updateData.description = description;
    if (fromAddress !== undefined) updateData.fromAddress = fromAddress;
    if (toAddress !== undefined) updateData.toAddress = toAddress;
    if (date !== undefined) updateData.date = date;
    if (category !== undefined) updateData.category = category;
    if (status !== undefined) updateData.status = status;

    await task.update(updateData);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    const updatedTask = await Task.findByPk(id, {
      include: [
        {
          model: User,
          as: 'customer',
          attributes: ['id', 'name', 'email', 'rating', 'avatar']
        }
      ]
    });

    res.json({
      success: true,
      message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      task: updatedTask
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏'
    });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
const deleteTask = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    const task = await Task.findByPk(id);

    if (!task) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å)
    if (task.userId !== userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏'
      });
    }

    await task.destroy();

    res.json({
      success: true,
      message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserTasks = async (req, res) => {
  try {
    const userId = req.user.id;
    const { page = 1, limit = 10, status } = req.query;
    const offset = (page - 1) * limit;

    const whereClause = { userId };
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status) {
      whereClause.status = status;
    }

    const tasks = await Task.findAndCountAll({
      where: whereClause,
      include: [
        {
          model: User,
          as: 'customer',
          attributes: ['id', 'name', 'email', 'rating', 'avatar']
        },
        {
          model: Bid,
          as: 'bids',
          include: [
            {
              model: User,
              as: 'executor',
              attributes: ['id', 'name', 'email', 'rating', 'avatar']
            }
          ],
          order: [['createdAt', 'DESC']]
        }
      ],
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
    const tasksWithStats = tasks.rows.map(task => {
      const taskData = task.toJSON();
      const bids = taskData.bids || [];
      
      return {
        ...taskData,
        stats: {
          totalBids: bids.length,
          acceptedBid: bids.find(bid => bid.accepted) || null,
          averagePrice: bids.length > 0 
            ? Math.round(bids.reduce((sum, bid) => sum + parseFloat(bid.price), 0) / bids.length)
            : 0,
          latestBidDate: bids.length > 0 ? bids[0].createdAt : null
        }
      };
    });

    res.json({
      success: true,
      tasks: tasksWithStats,
      pagination: {
        total: tasks.count,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(tasks.count / limit)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫'
    });
  }
};

// –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
const validateCreateTask = [
  body('title')
    .trim()
    .isLength({ min: 10, max: 200 })
    .withMessage('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('description')
    .trim()
    .isLength({ min: 20, max: 2000 })
    .withMessage('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 20 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('fromAddress')
    .trim()
    .isLength({ min: 5, max: 500 })
    .withMessage('–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('toAddress')
    .trim()
    .isLength({ min: 5, max: 500 })
    .withMessage('–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('date')
    .isISO8601()
    .withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
    .custom((value) => {
      const selectedDate = new Date(value);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (selectedDate < today) {
        throw new Error('–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');
      }
      return true;
    }),
  body('category')
    .isIn(['flat', 'office', 'intercity', 'garbage'])
    .withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏')
];

module.exports = {
  getTasks,
  getTaskById,
  createTask,
  updateTask,
  deleteTask,
  getUserTasks,
  validateCreateTask
}; 