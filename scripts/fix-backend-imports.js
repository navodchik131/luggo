const fs = require('fs');
const path = require('path');
const { findFiles } = require('./replace-logging.js');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ES6 –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ backend —Ñ–∞–π–ª–∞—Ö
function fixBackendImports(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    // –ó–∞–º–µ–Ω—è–µ–º ES6 –∏–º–ø–æ—Ä—Ç logger –Ω–∞ CommonJS require (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (content.includes("import logger from '../utils/logger.js'")) {
      content = content.replace("import logger from '../utils/logger.js'", "// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ console.log –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è");
    }
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã logger.* –Ω–∞ console.*
    content = content.replace(/logger\.debug\(/g, 'console.log(');
    content = content.replace(/logger\.info\(/g, 'console.log(');
    content = content.replace(/logger\.warn\(/g, 'console.warn(');
    content = content.replace(/logger\.error\(/g, 'console.error(');
    content = content.replace(/logger\.log\(/g, 'console.log(');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º backend –∏–º–ø–æ—Ä—Ç—ã...\n');
  
  const backendSrcPath = path.join(__dirname, '..', 'backend', 'src');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JS —Ñ–∞–π–ª—ã –≤ backend/src
  const backendFiles = findFiles(backendSrcPath, ['.js'], ['node_modules', 'dist']);
  
  let processed = 0;
  for (const file of backendFiles) {
    if (fixBackendImports(file)) {
      processed++;
    }
  }
  
  console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${processed} —Ñ–∞–π–ª–æ–≤ –≤ backend`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

module.exports = { fixBackendImports }; 