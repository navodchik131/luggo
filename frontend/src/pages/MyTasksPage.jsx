import { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { useAuth } from '../hooks/useAuth'
import api from '../services/api'
import logger from '../utils/logger'

const MyTasksPage = () => {
  const { user } = useAuth()
  
  const [tasks, setTasks] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [statusFilter, setStatusFilter] = useState('')
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 0
  })

  const statusLabels = {
    draft: '–ß–µ—Ä–Ω–æ–≤–∏–∫',
    active: '–ê–∫—Ç–∏–≤–Ω–∞—è',
    in_progress: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    awaiting_confirmation: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
  }

  const statusColors = {
    draft: 'status-draft',
    active: 'status-active',
    in_progress: 'status-pending',
    awaiting_confirmation: 'bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-xs font-medium',
    completed: 'status-completed'
  }

  const categoryLabels = {
    flat: '–ö–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥',
    office: '–û—Ñ–∏—Å–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥',
    intercity: '–ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–π –ø–µ—Ä–µ–µ–∑–¥',
    garbage: '–í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞'
  }

  useEffect(() => {
    loadMyTasks()
  }, [statusFilter, pagination.page])

  const loadMyTasks = async () => {
    try {
      setLoading(true)
      
      const params = {
        page: pagination.page,
        limit: pagination.limit
      }
      
      if (statusFilter) {
        params.status = statusFilter
      }
      
      logger.log('–ó–∞–≥—Ä—É–∂–∞—é –º–æ–∏ –∑–∞—è–≤–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params)
      
      const response = await api.get('/tasks/my', { params })
      logger.log('–û—Ç–≤–µ—Ç API –º–æ–∏—Ö –∑–∞—è–≤–æ–∫:', response.data)
      
      if (response.data.success) {
        setTasks(response.data.tasks)
        setPagination(prev => ({
          ...prev,
          ...response.data.pagination
        }))
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫')
      }
    } catch (err) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫:', err)
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫')
    } finally {
      setLoading(false)
    }
  }

  const handleStatusFilter = (status) => {
    setStatusFilter(status)
    setPagination(prev => ({ ...prev, page: 1 }))
  }

  const handlePageChange = (page) => {
    setPagination(prev => ({ ...prev, page }))
  }

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  const formatDateTime = (dateString) => {
    return new Date(dateString).toLocaleString('ru-RU', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const getStatusStats = () => {
    if (tasks.length === 0) return {}
    
    return tasks.reduce((stats, task) => {
      stats[task.status] = (stats[task.status] || 0) + 1
      return stats
    }, {})
  }

  const statusStats = getStatusStats()

  return (
    <div className="max-w-6xl mx-auto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold">–ú–æ–∏ –∑–∞—è–≤–∫–∏</h1>
          <p className="text-gray-600 mt-2">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∏
          </p>
        </div>
        <Link to="/create-task" className="btn btn-primary">
          + –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        </Link>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {!loading && tasks.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="text-2xl font-bold text-green-600">
              {statusStats.active || 0}
            </div>
            <div className="text-sm text-green-700">–ê–∫—Ç–∏–≤–Ω—ã–µ</div>
          </div>
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="text-2xl font-bold text-yellow-600">
              {statusStats.in_progress || 0}
            </div>
            <div className="text-sm text-yellow-700">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</div>
          </div>
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="text-2xl font-bold text-blue-600">
              {statusStats.completed || 0}
            </div>
            <div className="text-sm text-blue-700">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</div>
          </div>
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
            <div className="text-2xl font-bold text-gray-600">
              {tasks.reduce((sum, task) => sum + (task.stats?.totalBids || 0), 0)}
            </div>
            <div className="text-sm text-gray-700">–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤</div>
          </div>
        </div>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="card mb-6">
        <h3 className="font-semibold mb-4">üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É</h3>
        <div className="flex flex-wrap gap-2">
          <button
            onClick={() => handleStatusFilter('')}
            className={`btn btn-sm ${!statusFilter ? 'btn-primary' : 'btn-secondary'}`}
          >
            –í—Å–µ
          </button>
          <button
            onClick={() => handleStatusFilter('active')}
            className={`btn btn-sm ${statusFilter === 'active' ? 'btn-primary' : 'btn-secondary'}`}
          >
            –ê–∫—Ç–∏–≤–Ω—ã–µ
          </button>
          <button
            onClick={() => handleStatusFilter('in_progress')}
            className={`btn btn-sm ${statusFilter === 'in_progress' ? 'btn-primary' : 'btn-secondary'}`}
          >
            –í –ø—Ä–æ—Ü–µ—Å—Å–µ
          </button>
          <button
            onClick={() => handleStatusFilter('awaiting_confirmation')}
            className={`btn btn-sm ${statusFilter === 'awaiting_confirmation' ? 'btn-primary' : 'btn-secondary'}`}
          >
            –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          </button>
          <button
            onClick={() => handleStatusFilter('completed')}
            className={`btn btn-sm ${statusFilter === 'completed' ? 'btn-primary' : 'btn-secondary'}`}
          >
            –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
          </button>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ */}
      {loading ? (
        <div className="flex justify-center items-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      ) : error ? (
        <div className="text-center py-12">
          <div className="text-red-600 text-xl mb-4">{error}</div>
          <button onClick={loadMyTasks} className="btn btn-primary">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
          </button>
        </div>
      ) : tasks.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-4xl mb-4">üìù</div>
          <div className="text-xl text-gray-600 mb-2">
            {statusFilter ? '–ó–∞—è–≤–æ–∫ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫'}
          </div>
          <div className="text-gray-500 mb-4">
            –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
          </div>
          <Link to="/create-task" className="btn btn-primary">
            –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
          </Link>
        </div>
      ) : (
        <div className="space-y-6">
          {tasks.map(task => (
            <div key={task.id} className="card hover:shadow-md transition-shadow">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏ */}
              <div className="flex justify-between items-start mb-4">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="text-lg font-semibold">
                      <Link 
                        to={`/tasks/${task.id}`}
                        className="hover:text-blue-600 transition-colors"
                      >
                        {task.title}
                      </Link>
                    </h3>
                    <span className={statusColors[task.status]}>
                      {statusLabels[task.status]}
                    </span>
                  </div>
                  
                  <div className="text-sm text-gray-600 mb-3">
                    <span className="font-medium">{categoryLabels[task.category]}</span>
                    <span className="mx-2">‚Ä¢</span>
                    <span>üìÖ {formatDate(task.date)}</span>
                    <span className="mx-2">‚Ä¢</span>
                    <span>üïí –°–æ–∑–¥–∞–Ω–∞ {formatDateTime(task.createdAt)}</span>
                  </div>
                </div>
                
                <div className="text-right">
                  <Link
                    to={`/tasks/${task.id}`}
                    className="btn btn-secondary btn-sm"
                  >
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                  </Link>
                </div>
              </div>

              {/* –ê–¥—Ä–µ—Å–∞ */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <span className="text-xs text-gray-500">–û—Ç–∫—É–¥–∞:</span>
                  <div className="font-medium">{task.fromAddress}</div>
                </div>
                <div>
                  <span className="text-xs text-gray-500">–ö—É–¥–∞:</span>
                  <div className="font-medium">{task.toAddress}</div>
                </div>
              </div>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ */}
              <div className="border-t pt-4">
                <div className="flex justify-between items-center mb-3">
                  <h4 className="font-semibold">
                    üìà –û—Ç–∫–ª–∏–∫–∏ ({task.stats?.totalBids || 0})
                  </h4>
                  {task.stats?.totalBids > 0 && (
                    <div className="text-sm text-gray-600">
                      –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {task.stats.averagePrice.toLocaleString()} ‚ÇΩ
                    </div>
                  )}
                </div>

                {task.stats?.totalBids === 0 ? (
                  <div className="text-center py-4 text-gray-500 bg-gray-50 rounded">
                    <div className="text-2xl mb-1">üìù</div>
                    <div className="text-sm">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤</div>
                  </div>
                ) : (
                  <div>
                    {/* –ü—Ä–∏–Ω—è—Ç—ã–π –æ—Ç–∫–ª–∏–∫ */}
                    {task.stats.acceptedBid && (
                      <div className="bg-green-50 border border-green-200 rounded p-3 mb-3">
                        <div className="flex justify-between items-center">
                          <div className="flex items-center gap-2">
                            <span className="text-green-600 font-semibold">‚úì –ü—Ä–∏–Ω—è—Ç—ã–π –æ—Ç–∫–ª–∏–∫</span>
                            <span className="text-sm text-gray-600">
                              –æ—Ç {task.stats.acceptedBid.executor?.name}
                            </span>
                          </div>
                          <div className="text-lg font-bold text-green-600">
                            {task.stats.acceptedBid.price} ‚ÇΩ
                          </div>
                        </div>
                      </div>
                    )}

                    {/* –ö—Ä–∞—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                    <div className="grid grid-cols-3 gap-4 text-center">
                      <div>
                        <div className="text-lg font-semibold">{task.stats.totalBids}</div>
                        <div className="text-xs text-gray-600">–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤</div>
                      </div>
                      <div>
                        <div className="text-lg font-semibold text-green-600">
                          {task.stats.averagePrice.toLocaleString()} ‚ÇΩ
                        </div>
                        <div className="text-xs text-gray-600">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</div>
                      </div>
                      <div>
                        <div className="text-lg font-semibold">
                          {task.stats.latestBidDate ? formatDateTime(task.stats.latestBidDate) : '‚Äî'}
                        </div>
                        <div className="text-xs text-gray-600">–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫</div>
                      </div>
                    </div>
                  </div>
                )}

                {/* –î–µ–π—Å—Ç–≤–∏—è */}
                <div className="flex justify-between items-center pt-3 border-t mt-3">
                  <Link 
                    to={`/tasks/${task.id}`}
                    className="text-blue-600 hover:underline text-sm"
                  >
                    {task.stats?.totalBids > 0 ? '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏ ‚Üí' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí'}
                  </Link>
                  
                  {task.status === 'active' && task.stats?.totalBids > 0 && (
                    <span className="text-sm text-green-600 font-medium">
                      {task.stats.totalBids} –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      {pagination.totalPages > 1 && (
        <div className="flex justify-center items-center gap-2 mt-8">
          <button
            onClick={() => handlePageChange(pagination.page - 1)}
            disabled={pagination.page === 1}
            className="btn btn-secondary btn-sm disabled:opacity-50"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          
          {[...Array(pagination.totalPages)].map((_, i) => {
            const page = i + 1
            return (
              <button
                key={page}
                onClick={() => handlePageChange(page)}
                className={`btn btn-sm ${
                  page === pagination.page 
                    ? 'btn-primary' 
                    : 'btn-secondary'
                }`}
              >
                {page}
              </button>
            )
          })}
          
          <button
            onClick={() => handlePageChange(pagination.page + 1)}
            disabled={pagination.page === pagination.totalPages}
            className="btn btn-secondary btn-sm disabled:opacity-50"
          >
            –í–ø–µ—Ä–µ–¥ ‚Üí
          </button>
        </div>
      )}
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö */}
      {tasks.length > 0 && (
        <div className="text-center text-sm text-gray-500 mt-4">
          –ü–æ–∫–∞–∑–∞–Ω–æ {tasks.length} –∏–∑ {pagination.total} –∑–∞—è–≤–æ–∫
        </div>
      )}
    </div>
  )
}

export default MyTasksPage 