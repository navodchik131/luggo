const { Sequelize } = require('sequelize');
const envConfig = require('./environments');

const config = envConfig.current;

// –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
let sequelizeConfig;

if (config.database.dialect === 'postgres') {
  sequelizeConfig = new Sequelize(
    config.database.name,
    config.database.user,
    config.database.password,
    {
      host: config.database.host,
      port: config.database.port,
      dialect: 'postgres',
      logging: config.features.logging ? console.log : false,
      pool: {
        max: 5,
        min: 0,
        acquire: 30000,
        idle: 10000
      }
    }
  );
} else {
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
  sequelizeConfig = new Sequelize(config.database);
}

const sequelize = sequelizeConfig;

const connectDB = async () => {
  try {
    await sequelize.authenticate();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${config.database.dialect.toUpperCase()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (${envConfig.environment})`);
    
    // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
    if (config.features.autoSync) {
      await sequelize.sync({ alter: true });
      console.log('üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
};

module.exports = { sequelize, connectDB }; 